{
	"info": {
		"_postman_id": "61dc8bda-17b4-41f3-b858-32f0209ffa9b",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"pm.sendRequest(\"http://162.55.220.72:5005/first\", function (err, response) {\r",
							"    console.log(response);\r",
							"});\r",
							"\r",
							"// 2. Статус код 200 \r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"// pm.test(\"Правильный стринг в бади\", function () {\r",
							"//     pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200 \r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json. \r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"response_name=request_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Pavel\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"response_age=request_age\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(\"32\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"response_salary=request_salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(800);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.  \r",
							"let request_json = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"request_name=response_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(request_json.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"request_age=response_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(request_json.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"request_salary=response_salary\", function () {\r",
							"    pm.expect(jsonData.salary.toString()).to.eql(request_json.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response. \r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year=request_salary\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request_json.salary*4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Pavel",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "800",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200 \r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json. \r",
							"let resp_body = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request. \r",
							"let req_body = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.) \r",
							"pm.test(\"resp_name=req_name\", function () {\r",
							"    pm.expect(resp_body.name).to.eql(req_body.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)  \r",
							"pm.test(\"resp_age=req_age\", function () {\r",
							"    pm.expect(resp_body.age).to.eql(req_body.age.toString());\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"resp_salary=req_salary\", function () {\r",
							"    pm.expect(resp_body.salary.toString()).to.eql(req_body.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response. \r",
							"console.log(resp_body.family);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name. \r",
							"pm.test(\"dog_has_name_key\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog).haveOwnProperty(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age. \r",
							"pm.test(\"dog_has_age_key\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog).haveOwnProperty(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky. \r",
							"pm.test(\"dog_name=Luky\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog_age=4\", function () {\r",
							"    pm.expect(resp_body.family.pets.dog.age.toString()).to.eql(\"4\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Pavel&age=32&salary=800",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp_body = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_body = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"resp_name=req_name\", function () {\r",
							"    pm.expect(resp_body.name).to.eql(req_body.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.) \r",
							"pm.test(\"resp_age=req_age\", function () {\r",
							"    pm.expect(resp_body.age.toString()).to.eql(req_body.age.toString());\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.  \r",
							"console.log(req_body.salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp_body.salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response. \r",
							"console.log(resp_body.salary[0]);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response. \r",
							"console.log(resp_body.salary[1]);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.  \r",
							"console.log(resp_body.salary[2]);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.) \r",
							"pm.test(\"resp_salary_0=req_salary\", function () {\r",
							"    pm.expect(resp_body.salary[0].toString()).to.eql(req_body.salary.toString());\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary_1=req_salary*2\", function () {\r",
							"    pm.expect(parseInt(resp_body.salary[1])).to.eql(req_body.salary * 2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary_2=req_salary*3\", function () {\r",
							"    pm.expect(parseInt(resp_body.salary[2])).to.eql(req_body.salary * 3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", resp_body.name);\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", resp_body.age);\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", resp_body.salary[0]);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (let i = 0; i < resp_body.salary.length; i++) {\r",
							"    console.log(resp_body.salary[i])\r",
							"}\r",
							"// for (let salary of resp_body.salary) {\r",
							"//     console.log(salary)\r",
							"// }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Pavel&age=32&salary=800",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Pavel"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "800"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.  \r",
							"let resp_body = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req_body = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary  \r",
							"pm.test(\"resp_body has key 'start_qa_salary'\", function () {\r",
							"    pm.expect(resp_body).to.haveOwnProperty(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months \r",
							"pm.test(\"resp_body has key 'qa_salary_after_6_months'\", function () {\r",
							"    pm.expect(resp_body).to.haveOwnProperty(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"resp_body has key 'qa_salary_after_12_months'\", function () {\r",
							"    pm.expect(resp_body).to.haveOwnProperty(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year \r",
							"pm.test(\"resp_body has key 'qa_salary_after_1.5_year'\", function () {\r",
							"    pm.expect(resp_body).to.haveOwnProperty(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"resp_body has key 'qa_salary_after_3.5_years'\", function () {\r",
							"    pm.expect(resp_body).to.haveOwnProperty(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person \r",
							"pm.test(\"resp_body has key 'person'\", function () {\r",
							"    pm.expect(resp_body).to.haveOwnProperty(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = req_body.salary\", function () {\r",
							"    pm.expect(resp_body.start_qa_salary.toString()).to.eql(req_body.salary.toString());\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = req_body.salary * 2\", function () {\r",
							"    pm.expect(parseInt(resp_body.qa_salary_after_6_months)).to.eql(req_body.salary * 2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = req_body.salary * 2.7\", function () {\r",
							"    pm.expect(parseInt(resp_body.qa_salary_after_12_months)).to.eql(req_body.salary * 2.7);\r",
							"});\r",
							"\r",
							"// // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)  \r",
							"pm.test(\"qa_salary_after_1.5_year = req_body.salary * 3.3\", function () {\r",
							"    pm.expect(parseInt(resp_body[\"qa_salary_after_1.5_year\"])).to.eql(parseInt(req_body.salary * 3.3));\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.) \r",
							"pm.test(\"qa_salary_after_3.5_years = req_body.salary * 3.8\", function () {\r",
							"    pm.expect(parseInt(resp_body[\"qa_salary_after_3.5_years\"])).to.eql(req_body.salary * 3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"resp_body.person.u_name[0] = req_body.salary\", function () {\r",
							"    pm.expect(parseInt(resp_body.person.u_name[1])).to.eql(+req_body.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)  \r",
							"pm.test(\"resp_body.person.u_age = req_body.age\", function () {\r",
							"    pm.expect(+resp_body.person.u_age).to.eql(+req_body.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"resp_body.person.u_salary_5_years = req_body.salary * 4.2\", function () {\r",
							"    pm.expect(+resp_body.person.u_salary_5_years).to.eql(req_body.salary * 4.2);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let person_list = Object.keys(resp_body.person)\r",
							"\r",
							"for (let i = 0; i < person_list.length; i++) {\r",
							"    console.log(person_list[i]);\r",
							"};\r",
							"\r",
							"// for (let i of person_list) {\r",
							"//     console.log(i);\r",
							"// };\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}